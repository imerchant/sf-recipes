@using StarfieldRecipes.Configuration
@page "/"
@inject RecipesConfiguration Configuration

<PageTitle>Index</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Hello, world!</MudText>
<MudText Class="mb-8">@Configuration.SampleData</MudText>

<MudStack>
@foreach (var weapon in Configuration.Weapons.Values)
{
    <MudCard>
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudChip Label="true" Variant="Variant.Outlined">@weapon.Type</MudChip>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">@weapon.Name</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudExpansionPanels>
                @foreach (var slot in weapon.Components.Select(x => Configuration.Components[x]).GroupBy(x => x.Slot))
                {
                    <MudExpansionPanel Text="@slot.Key.ToString()">
                        <MudList Dense="true" DisablePadding="true" Clickable="false">
                            @foreach (var mod in slot)
                            {
                                <MudListItem Dense="true">
                                    @mod.Name
                                    @foreach (var resourceInfo in mod.Resources)
                                    {
                                        var resource = Configuration.Resources[resourceInfo.Key];
                                        var avatar = resource.Symbol ?? string.Empty;
                                        var style = $"color: {Colors.Orange.Default}; padding-right: .15rem; margin-top: .15rem;";
                                        <MudChip Label="true" Color="resource.Rarity.ToColor()">
                                            @if (!string.IsNullOrEmpty(avatar))
                                            {
                                                <MudText Typo="Typo.caption" Style="@style">@avatar</MudText>
                                            }
                                            @resourceInfo.Key x@(resourceInfo.Value)
                                        </MudChip>
                                    }
                                </MudListItem>
                                <MudDivider/>
                            }
                        </MudList>
                    </MudExpansionPanel>
                }
            </MudExpansionPanels>
        </MudCardContent>
    </MudCard>
}

<MudPaper Elevation="3">
    @foreach (var rarity in Enum.GetValues<Rarity>())
    {
        <MudChip Label="true" Color="rarity.ToColor()">@rarity</MudChip>
    }
</MudPaper>
</MudStack>